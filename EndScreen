/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package battleship;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

/**
 *
 * @author damyanlh
 */
public class EndscreenFramework  extends javax.swing.JFrame{

    private JLabel backgorund = new JLabel();
    private JLabel namePlatePlayer1 = new JLabel();
    private JLabel namePlatePlayer2 = new JLabel();
    private JLabel accuracyPlatePlayer1 = new JLabel();
    private JLabel accuracyPlatePlayer2 = new JLabel();
    private JLabel txtNamePlayer1 = new JLabel();
    private JLabel txtNamePlayer2 = new JLabel();
    private JLabel txtAccuracyPlayer1 = new JLabel();
    private JLabel txtAccuracyPlayer2 = new JLabel();
    private JLabel txtAccuracy = new JLabel();
    private JLabel txtWinner = new JLabel();
    private JLabel txtLoser = new JLabel();
    private JLabel txtGameover = new JLabel();
    private JLabel loserFog = new JLabel();
    private JLabel admiralPlayer1 = new JLabel();
    private JLabel admiralPlayer2 = new JLabel();
    private JTextArea scoreboard = new JTextArea();
    private JLabel scoreboardBackground = new JLabel();
    private JLayeredPane layeredPane = new JLayeredPane();
    private JLabel rematchButton = new JLabel();
    private JLabel quitButton = new JLabel();
    private String scoreboardText = "";

    //players
    private Player winner = new Player();
    private Player loser = new Player();

    public EndscreenFramework(Player winner, Player loser) {
        this.setBounds(0,0,914, 757);
        layeredPane.setBounds(0,0,900,720);
        this.winner = winner;
        this.loser = loser;
        //inicializirane

        // <editor-fold defaultstate="collapsed" desc="backgorund">
        backgorund.setBounds(0, 0, 900, 720);
        backgorund.setOpaque(false);
        backgorund.setIcon(new ImageIcon("src/images/BackgroundForGameOver.png"));
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="namePlatePlayer1">   
        namePlatePlayer1.setBounds(10,580, 163,63);
        namePlatePlayer1.setText(winner.getName());
        namePlatePlayer1.setOpaque(false);
        namePlatePlayer1.setFont(new Font("Fira Sans", Font.BOLD, 15));
        namePlatePlayer1.setForeground(Color.white);
        namePlatePlayer1.setIcon(new ImageIcon("src/images/NamePlate.png"));
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="namePlatePlayer2">
        namePlatePlayer2.setBounds(725, 580, 163,63);
        namePlatePlayer2.setText(loser.getName());
        namePlatePlayer2.setOpaque(false);
        namePlatePlayer2.setFont(new Font("Fira Sans", Font.BOLD, 15));      
        namePlatePlayer2.setIcon(new ImageIcon("src/images/NamePlate.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtNamePlayer1">
        txtNamePlayer1.setBounds(20, 600, 200,50);
        txtNamePlayer1.setText(winner.getName());
        txtNamePlayer1.setOpaque(false);
        txtNamePlayer1.setForeground(Color.white);
        txtNamePlayer1.setFont(new Font("Fira Sans", Font.BOLD, 16));      
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtNamePlayer2">
        txtNamePlayer2.setBounds(735, 600, 200,50);
        txtNamePlayer2.setText(loser.getName());
        txtNamePlayer2.setOpaque(false);
        txtNamePlayer2.setForeground(Color.white);
        txtNamePlayer2.setFont(new Font("Fira Sans", Font.BOLD, 16));      
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="accuracyPlatePlayer1">
        accuracyPlatePlayer1.setBounds(302, 220, 113 , 58);
        accuracyPlatePlayer1.setText("" + findAccuracy(loser));
        accuracyPlatePlayer1.setOpaque(false);
        accuracyPlatePlayer1.setFont(new Font("Fira Sans", Font.BOLD, 40));
        accuracyPlatePlayer1.setText(winner.getName() + " won!");
        accuracyPlatePlayer1.setIcon(new ImageIcon("src/images/LeftAccuracyPlate.png"));
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="accuracyPlatePlayer2">
        accuracyPlatePlayer2.setBounds(485, 220, 113 , 58);
        accuracyPlatePlayer2.setText("" + findAccuracy(winner));
        accuracyPlatePlayer2.setOpaque(false);
        accuracyPlatePlayer2.setFont(new Font("Fira Sans", Font.BOLD, 40));
        accuracyPlatePlayer2.setText(winner.getName() + " won!");
        accuracyPlatePlayer2.setIcon(new ImageIcon("src/images/RightAccuracyPlate.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtAccuracyPlayer1">
        txtAccuracyPlayer1.setBounds(352, 235, 50,30);
        txtAccuracyPlayer1.setText("0" + findAccuracy(loser));
        txtAccuracyPlayer1.setOpaque(false);
        txtAccuracyPlayer1.setForeground(Color.white);
        txtAccuracyPlayer1.setFont(new Font("Fira Sans", Font.BOLD, 30));      
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtAccuracyPlayer2">
        txtAccuracyPlayer2.setBounds(515, 235, 50,30);
        txtAccuracyPlayer2.setText("0" + findAccuracy(winner));
        txtAccuracyPlayer2.setOpaque(false);
        txtAccuracyPlayer2.setForeground(Color.white);
        txtAccuracyPlayer2.setFont(new Font("Fira Sans", Font.BOLD, 30));      
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="rematchButton">
        rematchButton.setBounds(470,620, 188,83);
        rematchButton.setOpaque(false);
        rematchButton.setIcon(new ImageIcon("src/images/RematchButton.png"));
        rematchButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                startRematch();
            }
        });
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="quitButton">
        quitButton.setBounds(270, 620, 188,83);
        quitButton.setOpaque(false);
        quitButton.setIcon(new ImageIcon("src/images/QuitButton.png"));
        quitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                disposer();
            }
        });
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtAccuracy">
        txtAccuracy.setBounds(370, 170, 155, 36);
        txtAccuracy.setOpaque(false);
        txtAccuracy.setIcon(new ImageIcon("src/images/Accuracy.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtWinner">
        txtWinner.setBounds(110, 160, 123,31);
        txtWinner.setOpaque(false);
        txtWinner.setIcon(new ImageIcon("src/images/Winner.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtLoser">
        txtLoser.setBounds(682, 160, 91,27);
        txtLoser.setOpaque(false);
        txtLoser.setIcon(new ImageIcon("src/images/Loser.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="txtGameover">
        txtGameover.setBounds(149, 20, 603,93);
        txtGameover.setOpaque(false);
        txtGameover.setIcon(new ImageIcon("src/images/GAMEOVER.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="admiralPlayer1">
        admiralPlayer1.setBounds(10, 200, 325,412);
        admiralPlayer1.setOpaque(false);
        //admiralPlayer1.setIcon( new ImageIcon(winner.getCurrentAdmiralFileName()));
        admiralPlayer1.setIcon( new ImageIcon("src/images/Admiral1.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="admiralPlayer2">
        admiralPlayer2.setBounds(565, 200, 325,412);
        admiralPlayer2.setOpaque(false);
        //admiralPlayer2.setIcon( new ImageIcon(loser.getCurrentAdmiralFileName()));
        admiralPlayer2.setIcon( new ImageIcon("src/images/Admiral2.png"));
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="loserFog">
        loserFog.setBounds(admiralPlayer2.getBounds());
        loserFog.setOpaque(false);
        loserFog.setIcon(new ImageIcon("src/images/LoserFog.png"));
        // </editor-fold>
     
        // <editor-fold defaultstate="collapsed" desc="scoreboard">
        scoreboard.setBounds(375, 340, 300, 300);
        scoreboard.setEditable(false);
        scoreboard.setColumns(10);
        scoreboard.setOpaque(false);
        scoreboard.setForeground(Color.white);
        scoreboard.setFont(new Font("Fira Sans", Font.BOLD, 20));
        //scoreboard.setIcon(new ImageIcon("src/images/Scoreboard.png"));
        try {
            scoreboardDisplayer();
        } catch (FileNotFoundException ex) {
            System.out.println("exception");
            //Logger.getLogger(EndScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="scoreboardBackground">
        scoreboardBackground.setBounds(348, 300, 204,281);
        scoreboardBackground.setOpaque(false); 
        scoreboardBackground.setIcon(new ImageIcon("src/images/Scoreboard.png"));
        // </editor-fold>
        
        this.setLayeredPane(layeredPane);
        this.revalidate();
        layeredPane.add(txtNamePlayer1,Integer.valueOf(3));
        layeredPane.add(txtNamePlayer2, Integer.valueOf(3));
        layeredPane.add(txtAccuracyPlayer1,Integer.valueOf(3));
        layeredPane.add(txtAccuracyPlayer2, Integer.valueOf(3));
        layeredPane.add(scoreboardBackground,Integer.valueOf(0));
        layeredPane.add(backgorund, Integer.valueOf(0));
        layeredPane.add(namePlatePlayer1, Integer.valueOf(1));
        layeredPane.add(namePlatePlayer2, Integer.valueOf(1));
        layeredPane.add(accuracyPlatePlayer1, Integer.valueOf(1));
        layeredPane.add(accuracyPlatePlayer2, Integer.valueOf(1));
        layeredPane.add(txtAccuracy, Integer.valueOf(2));
        layeredPane.add(txtWinner, Integer.valueOf(1));
        layeredPane.add(txtLoser, Integer.valueOf(1));
        layeredPane.add(txtGameover, Integer.valueOf(2));
        layeredPane.add(loserFog, Integer.valueOf(3));
        layeredPane.add(admiralPlayer1, Integer.valueOf(2));
        layeredPane.add(admiralPlayer2, Integer.valueOf(2));
        layeredPane.add(scoreboard, Integer.valueOf(2));
        layeredPane.add(rematchButton, Integer.valueOf(2));
        layeredPane.add(quitButton, Integer.valueOf(2));
        
        layeredPane.revalidate();
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

    }

    private void startRematch() {
        Player p1 = new Player();
        Player p2 = new Player();
        p1.setName(loser.getName());
        p2.setName(winner.getName());
        p1.setShipStyle(loser.getShipStyle());
        p2.setShipStyle(winner.getShipStyle());
        CharacterCreator.setP1(p1);
        CharacterCreator.setP2(p2);
        CharacterCreator.setCurrentPhase(1);
        disposer();
        new CharacterCreator().run();
    }

    public void disposer() {
        this.dispose();
    }
    
    private int findAccuracy(Player player) {
        float redNum = 0;
        float whiteNum = 0;
        for (int i = 0; i < 12; i++) {
            for (int j = 0; j < 12; j++) {
                if(player.getGrid(i, j) == 1) {
                    whiteNum++;
                } else if (player.getGrid(i, j) == 2) {
                    redNum++;
                }
            }
        }
        return (int) ((redNum/(whiteNum + redNum)) * 100);
    }
    
    private void scoreboardDisplayer() throws FileNotFoundException {
        //scoreboard
        //prihvashtane na faila za scorevoard-a
        try {
            File file = new File("src/images/scoreboard.txt");
            boolean isCreated = file.createNewFile();
            //pisane na poslednia pobeditel v scoreboarda
            FileWriter fileWriter = new FileWriter(file.getPath(), true);
            BufferedWriter out = new BufferedWriter(fileWriter);
            if (isCreated) {
                System.out.println("New scoreboard was created");
            } else {
                System.out.println("Scoreboard was found");
            }
            out.write(winner.getName() + "\t" +  scoreCaluclator(winner) + " " + "\n");
            out.close();

 

            //vzimane na poslednite 10 pobeditelia ot scoreboard-a i slagane v saotvetnia label
            BufferedReader reader = new BufferedReader(new FileReader(file.getPath()));
            int lines = 0;
            reader.mark(10000);
            while (reader.readLine() != null) {
                lines++;
            }
            System.out.println(lines);
            reader.reset();
            for (int i = 0; i < lines; i++) {
                if (i > lines - 10) {
                    System.out.println(i);
                    scoreboardText += reader.readLine();
                    scoreboardText += "\n";
                    System.out.println(scoreboardText);
                } else {
                    reader.readLine();
                }
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("Exception Occured:");
            e.printStackTrace();
        }
        scoreboard.setText(scoreboardText);
        layeredPane.revalidate();
    }
    
    private int scoreCaluclator(Player player)
    {
        int score = 0;
        score = findAccuracy(player)*10000/StrikeMenu.getRounds();
        return score;
    }
    
    public static void main(String[] args) {
        Player p1 = new Player(), p2 = new Player();
        p1.setName("FirstPlayer");
        p2.setName("SecondPlayer");
        
        new EndscreenFramework(p1, p2).setVisible(true);
    }
    
    

}
